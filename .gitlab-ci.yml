variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo-proj

cache:
  key: there-is-no-cache
  policy: pull

# At some point, we should do: cargo test --all

# lapack notes for the future:
#   Ubuntu 16.04     - apt-get update && apt-get install -y curl build-essential libgfortran-5-dev liblapack-dev libblas-dev
#   Debian (jessie?) - apt-get update && apt-get install -y curl build-essential libgfortran-6-dev liblapack-dev libblas-dev

test_crates:
  stage: build
  tags:
    - rust
  script:
    # Download pylon 6
    - curl --silent https://internal-static.strawlab.org/software/pylon/pylon_6.1.1.19861-deb0_amd64.deb > /tmp/pylon_6.1.1.19861-deb0_amd64.deb
    - echo "e738adb36f117ff2e5c428670025f9dfcdfbcbc9b22e2e2924a10736f876f2ed /tmp/pylon_6.1.1.19861-deb0_amd64.deb" | sha256sum -c

    # Install pylon 6
    - dpkg -i /tmp/pylon_6.1.1.19861-deb0_amd64.deb

    # Test braidz-parser
    - cd braidz-parser
    - cargo test
    - cd ..

    # Test pylon-cxx-rs
    - cd pylon-cxx-rs
    - cargo test
    - cd ..

    # Test tracking
    - cd tracking
    - cargo test
    - cd ..

    # Test flydra-types
    - cd flydra-types
    - cargo test
    - cd ..

    # Test flydra-mvg
    - cd flydra-mvg
    - cargo test
    - cd ..

    # Test fmf
    - cd fmf
    - cargo test
    - cd ..

    # Test lstsq
    - cd lstsq
    - cargo test
    - cd ..

    # Test freemovr-calibration, which requires opencv
    - apt-get update && apt-get install -y libopencv-dev
    - cd freemovr-calibration
    # run test in release mode, otherwise slow
    - cargo test --release --features "opencv"
    - cd ..

    # Test freemovr-calibration-cli
    - cd freemovr-calibration/freemovr-calibration-cli
    - cargo build --features "opencv"
    - cd ../..

    # Test datetime-conversion
    - cd datetime-conversion
    - cargo test
    - cd ..

    # Test simple-obj-parse
    - cd simple-obj-parse
    - cargo test
    - cd ..

    # strand-cam-offline-kalmanize
    - cd strand-cam-offline-kalmanize
    - cargo test
    - cd ..

test_flydra2:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - rust
  script:
    - ls -l _submodules
    - ls -l _submodules/nextgen-camera-users
    - apt-get -y update
    - apt-get install -y wget ca-certificates && wget -O- https://strawlab.org/assets/astraw-archive-keyring.gpg | apt-key add -
    - echo "deb http://debs.strawlab.org/ xenial/" >> /etc/apt/sources.list
    - apt-get -y update && apt-get install -y python-pip python-flydra-analysis
    - pip install pillow==6.2.2 --force-reinstall
    - pip install imageio==2.8.0 # flydra2 test requires imageio. fix version to keep python2 support.
    - cd braid-offline
    - cargo build --release
    - cd ..
    - cd flydra2
    - cargo build --release
    - PATH="../target/release:$PATH" cargo test --release
    - cd ..
    - cd strand-cam-pseudo-cal
    - cargo test
    - cd ..
    - cd braid-offline
    # test 3D retracking
    - cargo test --release
    # test 2D retracking
    - cargo run --no-default-features --features "flat-3d flydra2/bundle_files" --bin offline-retrack --  -d test_data/20180330_113743.short -o /tmp/k2d.braidz
    # TODO: test 3D retracking using `rust-cam-testing-data`
    # cargo run --bin offline-retrack -- -d ..\..\rust-cam-testing-data\20200622_111457.braid -o tmp

test_mvg:
  stage: test
  tags:
    - rust
  script:
    - cd mvg
    - cargo test

build_flyeye_dc1394:
  stage: build
  tags:
    - rust
  script:
    - cd fly-eye
    - RUSTFLAGS="-C target-feature=+sse2 -C codegen-units=1" cargo build --features "camsrc_dc1394"

test_image_tracker:
  stage: test
  tags:
    - rust
    - ipp
  script:
    - cargo --version
    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && cd image-tracker && RUST_BACKTRACE=1 cargo test --features "ipp-sys/2017"

test_fastimage:
  stage: test
  tags:
    - rust
    - ipp
  script:
    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && cd fastimage && cargo test --verbose --features "ipp-sys/2017" -- --nocapture --test-threads 1

xenial-deb-packages:
  stage: test # only because we depend on artifacts from build stage
  tags:
    - dc1394
  script:
    # Download pylon and install 6
    - curl --silent https://internal-static.strawlab.org/software/pylon/pylon_6.1.1.19861-deb0_amd64.deb > /tmp/pylon_6.1.1.19861-deb0_amd64.deb
    - echo "e738adb36f117ff2e5c428670025f9dfcdfbcbc9b22e2e2924a10736f876f2ed /tmp/pylon_6.1.1.19861-deb0_amd64.deb" | sha256sum -c
    - dpkg -i /tmp/pylon_6.1.1.19861-deb0_amd64.deb

    - mkdir -p $CI_PROJECT_DIR/rust-cam-xenial-debs-build
    - apt-get update && apt-get install -y dpkg-dev debhelper

    - cd strand-cam/packaging
    - pwd
    - ls -l ../../build
    - ldd ../../build/strand-cam-camtrig-pylon
    - ldd ../../build/strand-cam-dc1394
    - ldd ../../build/strand-cam-pylon
    - make
    - for F in *.deb; do echo; echo $F; dpkg-deb -I $F; done
    - cp -a *.changes $CI_PROJECT_DIR/rust-cam-xenial-debs-build/
    - cp -a *.deb $CI_PROJECT_DIR/rust-cam-xenial-debs-build/
    - ls -lh $CI_PROJECT_DIR/rust-cam-xenial-debs-build/
    # hack to remove dc1394 files since the artifact is too big to upload
    - rm -rf $CI_PROJECT_DIR/rust-cam-xenial-debs-build/*dc1394*
    - cd ../..
  dependencies:
    - strand-cam-pylon-linux
    - strand-cam-camtrig-pylon-linux
    - strand-cam-dc1394-linux
  artifacts:
    paths:
      - rust-cam-xenial-debs-build/
    name: "rust-cam-xenial-debs-build-${CI_COMMIT_SHA}"

# internal-strand-cam-xenial-deb-packages:
#   stage: test # only because we depend on artifacts from build stage
#   tags:
#       - pylon
#       - dc1394
#   script:
#     - mkdir -p $CI_PROJECT_DIR/internal_debs
#     - apt-get update && apt-get install -y dpkg-dev debhelper devscripts

#     - cd strand-cam/packaging
#     - make strand-cam-camtrig-pylon_VERSION_amd64.deb
#     - cp -a *.changes $CI_PROJECT_DIR/internal_debs/
#     - cp -a *.deb $CI_PROJECT_DIR/internal_debs/
#     - cd ../..
# dependencies:
#   - strand-cam-camtrig-pylon-linux
# artifacts:
#   paths:
#     - internal_debs/
#   name: "rust-cam-internal_debs-${CI_COMMIT_SHA}"

xenial-camtrig-deb-packages:
  stage: test # only because we depend on artifacts from build stage
  tags:
    - ubuntu-16.04
  script:
    - mkdir -p $CI_PROJECT_DIR/xenial-camtrig-debs
    - apt-get update && apt-get install -y dpkg-dev debhelper

    - cd camtrig
    - cp $CI_PROJECT_DIR/build/camtrig ./
    - cp $CI_PROJECT_DIR/camtrig-firmware-${CI_COMMIT_SHA}.bin ./camtrig-firmware.bin
    - DEB_BUILD_OPTIONS=nostrip dpkg-buildpackage -rfakeroot -b -uc -us
    - cd ..
    - cp -a camtrig*.changes $CI_PROJECT_DIR/xenial-camtrig-debs/
    - cp -a camtrig*.deb $CI_PROJECT_DIR/xenial-camtrig-debs/

  dependencies:
    - camtrig-linux
    - camtrig-firmware
  artifacts:
    paths:
      - xenial-camtrig-debs/
    name: "rust-cam-xenial-camtrig-debs-${CI_COMMIT_SHA}"

build-strand-cam-mkvfix:
  stage: build
  tags:
    - rust
  script:
    - cd strand-cam-mkvfix
    - cargo build --release
    - mkdir -p $CI_PROJECT_DIR/strand-cam-mkvfix
    - ldd ../target/release/strand-cam-mkvfix
    - ls -lh ../target/release/strand-cam-mkvfix
    - cp -a ../target/release/strand-cam-mkvfix $CI_PROJECT_DIR/strand-cam-mkvfix
  artifacts:
    paths:
      - strand-cam-mkvfix
    name: "strand-cam-mkvfix-${CI_COMMIT_SHA}"

build-freemovr-calibration:
  stage: build
  tags:
    - rust
  script:
    - cd freemovr-calibration/freemovr-calibration-cli
    - cargo build --release
    - mkdir -p $CI_PROJECT_DIR/freemovr-cal-linux
    - ldd ../../target/release/freemovr-calibration
    - ls -lh ../../target/release/freemovr-calibration
    - cp -a ../../target/release/freemovr-calibration $CI_PROJECT_DIR/freemovr-cal-linux
  artifacts:
    paths:
      - freemovr-cal-linux
    name: "freemovr-cal-linux-${CI_COMMIT_SHA}"

build-freemovr-calibration-webapp:
  stage: build
  tags:
    - rust
  script:
    - export PATH="$PATH:$CARGO_HOME/bin"
    - echo $PATH
    - rustup target add wasm32-unknown-unknown

    - cargo install wasm-bindgen-cli --version 0.2.68 --force
    - wasm-bindgen --version

    - cd freemovr-calibration/freemovr-calibration-webapp
    - ./build.sh
    - mkdir -p $CI_PROJECT_DIR/freemovr-cal-webapp
    - cp -a pkg/* $CI_PROJECT_DIR/freemovr-cal-webapp
  artifacts:
    paths:
      - freemovr-cal-webapp
    name: "freemovr-cal-webapp-${CI_COMMIT_SHA}"

deploy-freemovr-calibration-webapp:
  stage: deploy
  tags:
    - rsync
  script:
    - mkdir ~/.ssh
    - chmod 0700 ~/.ssh
    - echo "|1|eh/SuKKTa6MBQdNoN+gs5XJrzLY=|eir5FQuVRJtnzVp3hyOIlPXPEGs= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDI610RLfmUtxDbgDkNdTmnIEAjDsiiOrODVQNkq4TXjvx6+TUSgL2vo1Sxq4c/I9uD3HeXK2HnBH0WJZN5FB9g=" >> ~/.ssh/known_hosts
    - echo "$SSH_STRAWLAB_ORG_VR_CAL" > ~/.ssh/id_rsa

    - cat /root/.ssh/id_rsa
    - ls -l /root/.ssh/id_rsa
    - md5sum /root/.ssh/id_rsa
    - chmod go-rx ~/.ssh/id_rsa
    - ls -ltrh freemovr-cal-webapp
    - rsync -avzP --delete freemovr-cal-webapp/ vr-cal-upload@139.162.155.33:/var/www/strawlab.org/html/vr-cal
  environment:
    name: production
    url: https://strawlab.org/vr-cal/
  dependencies:
    - build-freemovr-calibration-webapp
  when: manual

strand-cam-pylon-linux:
  stage: build
  tags:
    - rust
    - ipp
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    # Note: this is not a good general-purpose way to install wasm-pack, because it does not install wasm-bindgen.
    # Instead, use the installer at https://rustwasm.github.io/wasm-pack/installer/.
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/wasm-pack/wasm-pack-0.8.1-amd64.exe > $CARGO_HOME/bin/wasm-pack
    - chmod a+x $CARGO_HOME/bin/wasm-pack
    - export PATH="$PATH:$CARGO_HOME/bin"
    - wasm-pack --version

    - rustc --version
    - curl --silent https://internal-static.strawlab.org/software/libvpx/libvpx-opt-static_1.8.0-0ads1_amd64.deb > /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - dpkg -i /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb

    # Download pylon and install 6
    - curl --silent https://internal-static.strawlab.org/software/pylon/pylon_6.1.1.19861-deb0_amd64.deb > /tmp/pylon_6.1.1.19861-deb0_amd64.deb
    - echo "e738adb36f117ff2e5c428670025f9dfcdfbcbc9b22e2e2924a10736f876f2ed /tmp/pylon_6.1.1.19861-deb0_amd64.deb" | sha256sum -c
    - dpkg -i /tmp/pylon_6.1.1.19861-deb0_amd64.deb

    - curl --silent https://internal-static.strawlab.org/software/opencv/opencv-3.2-static.tar.gz > /tmp/opencv-3.2-static.tar.gz
    - tar xzf /tmp/opencv-3.2-static.tar.gz -C /

    - export APRILTAG_SRC=`pwd`/_submodules/apriltag
    - export APRILTAG_SYS_METHOD=raw,static

    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/cargo-web/cargo-web-0.6.25-amd64.exe > $CARGO_HOME/bin/cargo-web
    - chmod a+x $CARGO_HOME/bin/cargo-web
    - cd strand-cam/yew_frontend && time ./build.sh && cd ..
    # force recomputing git version tag
    - touch build.rs

    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && OPENCV_STATIC=1 PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig:/opt/libvpx/libvpx-1.8.0/lib/pkgconfig IPP_STATIC=1 RUSTFLAGS="-C target-feature=+sse2 -C codegen-units=1 -C link-args=-Wl,-rpath,/opt/pylon/lib" NUM_JOBS=2 cargo build --features "bundle_files posix_sched_fifo backend_pyloncxx ipp-sys/2017 checkercal fiducial" --release
    # - ../target/release/strand-cam --version # disabled because requires pylon libs in path
    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../target/release/strand-cam $CI_PROJECT_DIR/build/strand-cam-pylon
    - ../target/release/write-debian-changelog strand-cam-pylon > $CI_PROJECT_DIR/build/strand-cam-pylon.changelog
  artifacts:
    paths:
      - build/
    name: "strand-cam-pylon-linux-${CI_COMMIT_SHA}"

py-strandcam-pylon-linux:
  stage: build
  tags:
    - rust
    - ipp
  script:
    # Note: this is not a good general-purpose way to install wasm-pack, because it does not install wasm-bindgen.
    # Instead, use the installer at https://rustwasm.github.io/wasm-pack/installer/.
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/wasm-pack/wasm-pack-0.8.1-amd64.exe > $CARGO_HOME/bin/wasm-pack
    - chmod a+x $CARGO_HOME/bin/wasm-pack
    - export PATH="$PATH:$CARGO_HOME/bin"
    - wasm-pack --version

    - rustc --version
    - curl --silent https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh > /tmp/Miniconda3-latest-Linux-x86_64.sh
    - chmod a+x /tmp/Miniconda3-latest-Linux-x86_64.sh
    - bash /tmp/Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda3
    - source $HOME/miniconda3/etc/profile.d/conda.sh
    - cd py-strandcam
    - conda env create -f environment.yml
    - conda activate strandcam
    - cd ..

    - curl --silent https://internal-static.strawlab.org/software/libvpx/libvpx-opt-static_1.7.0-0ads1_amd64.deb > /tmp/libvpx-opt-static_1.7.0-0ads1_amd64.deb
    - dpkg -i /tmp/libvpx-opt-static_1.7.0-0ads1_amd64.deb

    - curl --silent https://internal-static.strawlab.org/software/pylon/pylon_5.2.0.13457-deb0_amd64.deb > /tmp/pylon_5.2.0.13457-deb0_amd64.deb
    - dpkg -i /tmp/pylon_5.2.0.13457-deb0_amd64.deb

    - curl --silent https://internal-static.strawlab.org/software/opencv/opencv-3.2-static.tar.gz > /tmp/opencv-3.2-static.tar.gz
    - tar xzf /tmp/opencv-3.2-static.tar.gz -C /

    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/cargo-web/cargo-web-0.6.25-amd64.exe > $CARGO_HOME/bin/cargo-web
    - chmod a+x $CARGO_HOME/bin/cargo-web
    - cd strand-cam/yew_frontend && time ./build.sh && cd ..
    # force recomputing git version tag
    - touch build.rs
    - cd ../py-strandcam
    - touch rust/build.rs
    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && OPENCV_STATIC=1 PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig:/opt/libvpx/libvpx-1.7.0/lib/pkgconfig IPP_STATIC=1 RUSTFLAGS="-C target-feature=+sse2 -C codegen-units=1 -C link-args=-Wl,-rpath,/opt/pylon/lib" NUM_JOBS=2 BACKEND=pylon IPP_SYS=2017 python setup.py install

strand-cam-camtrig-pylon-linux:
  stage: build
  tags:
    - rust
    - ipp
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    # Note: this is not a good general-purpose way to install wasm-pack, because it does not install wasm-bindgen.
    # Instead, use the installer at https://rustwasm.github.io/wasm-pack/installer/.
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/wasm-pack/wasm-pack-0.8.1-amd64.exe > $CARGO_HOME/bin/wasm-pack
    - chmod a+x $CARGO_HOME/bin/wasm-pack
    - export PATH="$PATH:$CARGO_HOME/bin"
    - wasm-pack --version

    # TODO: include firmware bundled
    - rustc --version
    - curl --silent https://internal-static.strawlab.org/software/libvpx/libvpx-opt-static_1.8.0-0ads1_amd64.deb > /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - dpkg -i /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb

    # Download pylon and install 6
    - curl --silent https://internal-static.strawlab.org/software/pylon/pylon_6.1.1.19861-deb0_amd64.deb > /tmp/pylon_6.1.1.19861-deb0_amd64.deb
    - echo "e738adb36f117ff2e5c428670025f9dfcdfbcbc9b22e2e2924a10736f876f2ed /tmp/pylon_6.1.1.19861-deb0_amd64.deb" | sha256sum -c
    - dpkg -i /tmp/pylon_6.1.1.19861-deb0_amd64.deb

    - curl --silent https://internal-static.strawlab.org/software/opencv/opencv-3.2-static.tar.gz > /tmp/opencv-3.2-static.tar.gz
    - tar xzf /tmp/opencv-3.2-static.tar.gz -C /

    - export APRILTAG_SRC=`pwd`/_submodules/apriltag
    - export APRILTAG_SYS_METHOD=raw,static

    - apt-get update && apt-get install -y libudev-dev
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/cargo-web/cargo-web-0.6.25-amd64.exe > $CARGO_HOME/bin/cargo-web
    - chmod a+x $CARGO_HOME/bin/cargo-web
    - cd rt-image-viewer/yew_frontend && time ./build.sh && cd ../..
    - cargo web --version
    - cd strand-cam/yew_frontend && time ./build-flydratrax.sh && cd ..
    # force recomputing git version tag
    - touch build.rs

    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && OPENCV_STATIC=1 PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig:/opt/libvpx/libvpx-1.8.0/lib/pkgconfig IPP_STATIC=1 RUSTFLAGS="-C target-feature=+sse2 -C codegen-units=1 -C link-args=-Wl,-rpath,/opt/pylon/lib" NUM_JOBS=2 cargo build --no-default-features --features "bundle_files posix_sched_fifo backend_pyloncxx flydratrax imtrack-dark-circle flydra2/bundle_files ipp-sys/2017 cfg-pt-detect-src-prefs checkercal fiducial with_camtrig" --release
    - cd ../strand-cam-offline-kalmanize
    - cargo build --release
    # - ../target/release/strand-cam --version # disabled because requires pylon libs in path
    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../target/release/strand-cam $CI_PROJECT_DIR/build/strand-cam-camtrig-pylon
    - cp ../target/release/strand-cam-offline-kalmanize $CI_PROJECT_DIR/build/
    - ../target/release/write-debian-changelog strand-cam-camtrig-pylon > $CI_PROJECT_DIR/build/strand-cam-camtrig-pylon.changelog
    - cat $CI_PROJECT_DIR/build/strand-cam-camtrig-pylon.changelog
    - cp ../target/release/strand-cam-version.json $CI_PROJECT_DIR/build/
  artifacts:
    paths:
      - build/
    name: "strand-cam-camtrig-pylon-linux-${CI_COMMIT_SHA}"

braid-offline-linux:
  stage: build
  tags:
    - rust
  script:
    - apt-get update && apt-get install -y dpkg-dev debhelper
    - cd $CI_PROJECT_DIR/braid-offline
    # force recomputing git version tag
    - touch Cargo.toml
    - cd packaging
    - make
    - mkdir -p $CI_PROJECT_DIR/braid-offline-linux-build
    - cp *.deb $CI_PROJECT_DIR/braid-offline-linux-build
    - cp *.changes $CI_PROJECT_DIR/braid-offline-linux-build
    - dpkg -I *.deb
    - dpkg --contents *.deb

  artifacts:
    paths:
      - braid-offline-linux-build/
    name: "braid-offline-linux-${CI_COMMIT_SHA}"

braidz-cli-linux:
  stage: build
  tags:
    - rust
  script:
    - apt-get update && apt-get install -y dpkg-dev debhelper
    - cd $CI_PROJECT_DIR/braidz-parser/braidz-cli
    # force recomputing git version tag
    - touch Cargo.toml
    - cd packaging
    - make
    - ldd braidz-cli/braidz-cli
    - mkdir -p $CI_PROJECT_DIR/braidz-cli-linux-build
    - cp *.deb $CI_PROJECT_DIR/braidz-cli-linux-build
    - cp *.changes $CI_PROJECT_DIR/braidz-cli-linux-build
    - dpkg -I *.deb
    - dpkg --contents *.deb
  artifacts:
    paths:
      - braidz-cli-linux-build/
    name: "braidz-cli-linux-${CI_COMMIT_SHA}"

braidz-viewer:
  stage: build
  tags:
    - rust
  script:
    # Note: this is not a good general-purpose way to install wasm-pack, because it does not install wasm-bindgen.
    # Instead, use the installer at https://rustwasm.github.io/wasm-pack/installer/.
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/wasm-pack/wasm-pack-0.8.1-amd64.exe > $CARGO_HOME/bin/wasm-pack
    - chmod a+x $CARGO_HOME/bin/wasm-pack
    - export PATH="$PATH:$CARGO_HOME/bin"
    - wasm-pack --version
    - cd braidz-viewer
    - ./build.sh

braid-pylon-linux:
  stage: build
  tags:
    - rust
    - ipp
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - rustc --version
    - curl --silent https://internal-static.strawlab.org/software/libvpx/libvpx-opt-static_1.8.0-0ads1_amd64.deb > /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - dpkg -i /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb

    # Download pylon and install 6
    - curl --silent https://internal-static.strawlab.org/software/pylon/pylon_6.1.1.19861-deb0_amd64.deb > /tmp/pylon_6.1.1.19861-deb0_amd64.deb
    - echo "e738adb36f117ff2e5c428670025f9dfcdfbcbc9b22e2e2924a10736f876f2ed /tmp/pylon_6.1.1.19861-deb0_amd64.deb" | sha256sum -c
    - dpkg -i /tmp/pylon_6.1.1.19861-deb0_amd64.deb

    - curl --silent https://internal-static.strawlab.org/software/opencv/opencv-3.2-static.tar.gz > /tmp/opencv-3.2-static.tar.gz
    - tar xzf /tmp/opencv-3.2-static.tar.gz -C /

    - export APRILTAG_SRC=`pwd`/_submodules/apriltag
    - export APRILTAG_SYS_METHOD=raw,static

    - apt-get update && apt-get install -y libudev-dev

    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/cargo-web/cargo-web-0.6.25-amd64.exe > $CARGO_HOME/bin/cargo-web
    - chmod a+x $CARGO_HOME/bin/cargo-web

    # Note: this is not a good general-purpose way to install wasm-pack, because it does not install wasm-bindgen.
    # Instead, use the installer at https://rustwasm.github.io/wasm-pack/installer/.
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/wasm-pack/wasm-pack-0.8.1-amd64.exe > $CARGO_HOME/bin/wasm-pack
    - chmod a+x $CARGO_HOME/bin/wasm-pack
    - export PATH="$PATH:$CARGO_HOME/bin"
    - wasm-pack --version

    - cd $CI_PROJECT_DIR/strand-cam/yew_frontend && time ./build.sh

    # build mainbrain web frontend
    - cd $CI_PROJECT_DIR/flydra2-mainbrain/frontend
    - ./build.sh

    # build braid-run
    - cd $CI_PROJECT_DIR/braid/braid-run
    # force recomputing git version tag
    - touch build.rs

    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && OPENCV_STATIC=1 PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig:/opt/libvpx/libvpx-1.8.0/lib/pkgconfig IPP_STATIC=1 RUSTFLAGS="-C target-feature=+sse2 -C codegen-units=1 -C link-args=-Wl,-rpath,/opt/pylon/lib" NUM_JOBS=2 cargo build --no-default-features --features "bundle_files backend_pyloncxx ipp-sys/2017 fiducial jemalloc" --release
    - ldd ../../target/release/braid-run

    # build braid
    - cd $CI_PROJECT_DIR/braid
    # force recomputing git version tag
    - touch build.rs
    - NUM_JOBS=2 cargo build --release
    - ldd ../target/release/braid

    - ../target/release/write-debian-changelog braid-pylon > ../target/release/braid.changelog
    - ls -l ../target/release
    - cd packaging
    - apt-get update && apt-get install -y dpkg-dev debhelper
    - make
    - mkdir -p $CI_PROJECT_DIR/braid-pylon-linux-build
    - cp *.deb $CI_PROJECT_DIR/braid-pylon-linux-build
    - cp *.changes $CI_PROJECT_DIR/braid-pylon-linux-build
    - ls -lh *.deb
    - ls -l *.deb
    - dpkg -I *.deb
    - dpkg --contents *.deb
    - dpkg --info *.deb

  artifacts:
    paths:
      - braid-pylon-linux-build/
    name: "braid-pylon-linux-${CI_COMMIT_SHA}"

strand-cam-dc1394-linux:
  stage: build
  tags:
    - rust
    - dc1394
    - ipp
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    # Note: this is not a good general-purpose way to install wasm-pack, because it does not install wasm-bindgen.
    # Instead, use the installer at https://rustwasm.github.io/wasm-pack/installer/.
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/wasm-pack/wasm-pack-0.8.1-amd64.exe > $CARGO_HOME/bin/wasm-pack
    - chmod a+x $CARGO_HOME/bin/wasm-pack
    - export PATH="$PATH:$CARGO_HOME/bin"
    - wasm-pack --version

    - rustc --version
    - curl --silent https://internal-static.strawlab.org/software/libvpx/libvpx-opt-static_1.8.0-0ads1_amd64.deb > /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - dpkg -i /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb

    - curl --silent https://internal-static.strawlab.org/software/opencv/opencv-3.2-static.tar.gz > /tmp/opencv-3.2-static.tar.gz
    - tar xzf /tmp/opencv-3.2-static.tar.gz -C /

    - export APRILTAG_SRC=`pwd`/_submodules/apriltag
    - export APRILTAG_SYS_METHOD=raw,static

    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/cargo-web/cargo-web-0.6.25-amd64.exe > $CARGO_HOME/bin/cargo-web
    - chmod a+x $CARGO_HOME/bin/cargo-web
    - cd strand-cam/yew_frontend && time ./build.sh && cd ..
    # force recomputing git version tag
    - touch build.rs
    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && OPENCV_STATIC=1 PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig:/opt/libvpx/libvpx-1.8.0/lib/pkgconfig IPP_STATIC=1 NUM_JOBS=2 RUSTFLAGS="-C target-feature=+sse2 -C codegen-units=1" cargo build --features "bundle_files posix_sched_fifo backend_dc1394 ipp-sys/2017 checkercal fiducial" --release
    - ../target/release/strand-cam --version
    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../target/release/strand-cam $CI_PROJECT_DIR/build/strand-cam-dc1394
    - ../target/release/write-debian-changelog strand-cam-dc1394 > $CI_PROJECT_DIR/build/strand-cam-dc1394.changelog
  artifacts:
    paths:
      - build/
    name: "strand-cam-dc1394-linux-${CI_COMMIT_SHA}"

camtrig-linux:
  stage: build
  tags:
    - rust
  script:
    - apt-get update
    - apt-get install -y libudev-dev
    - cd camtrig
    - NUM_JOBS=2 RUSTFLAGS="-C target-feature=+sse2 -C codegen-units=1" cargo build --release
    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../target/release/camtrig $CI_PROJECT_DIR/build/camtrig
  artifacts:
    paths:
      - build/
    name: "camtrig-linux-${CI_COMMIT_SHA}"

camtrig-firmware:
  stage: build
  tags:
    - rust
  script:
    - rustc --version
    - cd camtrig-firmware

    # Could do `cargo install cargo-binutils` instead of the following lines,
    # but then we'd build from source, which just takes longer.
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/cargo-size/cargo-size-0.1.5-amd64.exe > $CARGO_HOME/bin/cargo-size
    - chmod a+x $CARGO_HOME/bin/cargo-size
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/cargo-objcopy/cargo-objcopy-0.1.5-amd64.exe > $CARGO_HOME/bin/cargo-objcopy
    - chmod a+x $CARGO_HOME/bin/cargo-objcopy

    - rustup component add llvm-tools-preview
    - rustup component add rust-src
    - rustup target add thumbv7em-none-eabihf
    - rm -f target_makefile/thumbv7em-none-eabihf/release/camtrig-firmware.bin
    - touch Cargo.toml # ensure we rebuild it
    - make
    - cp target_makefile/thumbv7em-none-eabihf/release/camtrig-firmware.bin $CI_PROJECT_DIR/camtrig-firmware-${CI_COMMIT_SHA}.bin
  artifacts:
    paths:
      - camtrig-firmware-${CI_COMMIT_SHA}.bin
    name: "camtrig-firmware-${CI_COMMIT_SHA}"

test_simple_pylon:
  stage: test
  tags:
    - rust
  script:
    # Download pylon and install 6
    - curl --silent https://internal-static.strawlab.org/software/pylon/pylon_6.1.1.19861-deb0_amd64.deb > /tmp/pylon_6.1.1.19861-deb0_amd64.deb
    - echo "e738adb36f117ff2e5c428670025f9dfcdfbcbc9b22e2e2924a10736f876f2ed /tmp/pylon_6.1.1.19861-deb0_amd64.deb" | sha256sum -c
    - dpkg -i /tmp/pylon_6.1.1.19861-deb0_amd64.deb

    - cd ci2-simple-demo
    - NUM_JOBS=2 cargo build --features backend_pyloncxx

test_simple_dc1394:
  stage: test
  tags:
    - rust
    - dc1394
  script:
    - cd ci2-simple-demo
    - NUM_JOBS=2 cargo build --features backend_dc1394

# -------

# deploy-strand-cam:
#   stage: deploy
#   tags:
#     - debs.strawlab.org-deployer
#   script:
#     - $HOME/bin/process_and_upload $CI_PROJECT_DIR/rust-cam-xenial-debs-build /debs.strawlab.org-mirror/debs.strawlab.org
#   environment:
#     name: production
#     url: http://debs.strawlab.org/xenial/
#   dependencies:
#     - xenial-deb-packages
#   when: manual
#   # only:
#   # - master

deploy-camtrig:
  stage: deploy
  tags:
    - debs.strawlab.org-deployer
  script:
    - $HOME/bin/process_and_upload $CI_PROJECT_DIR/xenial-camtrig-debs /debs.strawlab.org-mirror/debs.strawlab.org
  environment:
    name: production
    url: http://debs.strawlab.org/xenial/
  dependencies:
    - xenial-camtrig-deb-packages
  when: manual
  # only:
  # - master

deploy-braid-pylon:
  stage: deploy
  tags:
    - aptly.strawlab.org-deployer
  script:
    # see in strawlab-it-admin docker-compose.yml aptly-repo-http for tips how to set this up.
    - aptly repo add strawlab-xenial braid-pylon-linux-build/
    - aptly publish update xenial filesystem:deploy:xenial
  environment:
    name: strawlab aptly web server
    url: https://aptly.strawlab.org/
  dependencies:
    - braid-pylon-linux
  when: manual

deploy-braid-offline:
  stage: deploy
  tags:
    - aptly.strawlab.org-deployer
  script:
    # see in strawlab-it-admin docker-compose.yml aptly-repo-http for tips how to set this up.
    - aptly repo add strawlab-xenial braid-offline-linux-build/
    - aptly publish update xenial filesystem:deploy:xenial
  environment:
    name: strawlab aptly web server
    url: https://aptly.strawlab.org/
  dependencies:
    - braid-offline-linux
  when: manual

deploy-braidz-cli:
  stage: deploy
  tags:
    - aptly.strawlab.org-deployer
  script:
    # see in strawlab-it-admin docker-compose.yml aptly-repo-http for tips how to set this up.
    - aptly repo add strawlab-xenial braidz-cli-linux-build/
    - aptly publish update xenial filesystem:deploy:xenial
  environment:
    name: strawlab aptly web server
    url: https://aptly.strawlab.org/
  dependencies:
    - braidz-cli-linux
  when: manual

deploy-strand-cam-internal:
  stage: deploy
  tags:
    - aptly.strawlab.org-deployer
  script:
    # see in strawlab-it-admin docker-compose.yml aptly-repo-http for tips how to set this up.
    - aptly repo add strawlab-xenial rust-cam-xenial-debs-build/
    - aptly publish update xenial filesystem:deploy:xenial
  environment:
    name: strawlab aptly web server
    url: https://aptly.strawlab.org/
  dependencies:
    - xenial-deb-packages
  when: manual

build-fmf-cli-xenial:
  stage: build
  tags:
    - rust
  script:
    - curl --silent https://internal-static.strawlab.org/software/libvpx/libvpx-opt-static_1.8.0-0ads1_amd64.deb > /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - dpkg -i /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    # test webm-writer start
    - cd webm-writer
    - PKG_CONFIG_PATH=/opt/libvpx/libvpx-1.8.0/lib/pkgconfig cargo run --example save-animation --release
    - cd ..
    # test webm-writer stop
    - cd fmf/fmf-cli
    - PKG_CONFIG_PATH=/opt/libvpx/libvpx-1.8.0/lib/pkgconfig cargo build --release
    - mkdir -p $CI_PROJECT_DIR/fmf-cli-xenial
    - ldd ../../target/release/fmf
    - ls -lh ../../target/release/fmf
    - cp -a ../../target/release/fmf $CI_PROJECT_DIR/fmf-cli-xenial
  artifacts:
    paths:
      - fmf-cli-xenial
    name: "fmf-cli-xenial-${CI_COMMIT_SHA}"
